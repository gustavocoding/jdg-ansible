- name: Prepare JDG servers
  hosts: jdg
  vars_files:
    - vars/default.yml
  tasks:
    - set_fact:
        jfrfile: "jdg-{{ inventory_hostname }}-{{ 1000 | random }}.jfr"
    - name: Copy jfr template
      copy:
        src: ./files/jfr/jdg_gc_all_exceptions_all_threads_30s.jfc
        dest: /opt/jdg/
    - name: Start JFR
      shell: jcmd $(pgrep -n java) JFR.start settings=/opt/jdg/jdg_gc_all_exceptions_all_threads_30s.jfc name=stress filename={{ jfrfile }}

- name: Run stress test
  hosts: loader
  vars_files:
    - vars/default.yml
  tasks:
    - name: Run stress
      shell: /opt/loader/stress.java -s={{ groups['jdg'][0] }} -c={{ cache_name }} -d={{ duration_min }} -p={{ protocol }} -g={{ read_percent }} -r={{ remove_percent }} -w={{ write_percent }} -t={{ stress_threads }}

- name: Fetch JFR
  hosts: jdg
  vars_files:
    - vars/default.yml
  tasks:
    - name: Dump JFR
      shell: jcmd $(pgrep -n java) JFR.dump name=stress
    - name: Stop JFR
      shell: jcmd $(pgrep -n java) JFR.stop name=stress
    - name: Compress JFR
      shell: cd /opt/jdg/server/ && zip -rj /opt/jdg/server/{{ jfrfile }}.zip /opt/jdg/server/{{ jfrfile }}
    - name: Download JFRs
      fetch:
        src: "/opt/jdg/server/{{ jfrfile }}.zip"
        dest: "results/{{ jfrfile }}.zip"
        flat: yes
        validate_checksum: no

- name: Fetch latency results
  hosts: loader
  vars_files:
    - vars/default.yml
  tasks:
    - name: obtain result file
      shell: ls -Art ~/ | tail -n 1
      register: result
    - name: Download
      fetch:
        src: "{{ result.stdout }}"
        dest: "results/{{ result.stdout }}"
        flat: yes

